{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/CourseProgress.sol": {
      "content": "// SPDX-License-Identifier: MIT  \npragma solidity ^0.8.20;  \n\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";  \n\n/**  \n * @dev 你的NFT合约接口，只需包含要调用的函数签名即可  \n *      这里对应CourseNFT的safeMint(address,string)  \n */  \ninterface ICourseNFT {  \n    function safeMint(address to, string memory tokenURI_) external;  \n}  \n\ncontract CourseProgress {  \n    AggregatorV3Interface public aggregator;   // Chainlink Aggregator  \n    ICourseNFT public courseNft;              // 你的NFT合约  \n    address public owner;  \n\n    // 记录所有 courseId 对应的 IPFS CID  \n    mapping(uint256 => string) private courseCIDs;  \n\n    event ProgressChecked(int256 progress, address indexed user, uint256 courseId);  \n    event NftMinted(address indexed user, uint256 courseId, string tokenURI);  \n\n    constructor(address aggregatorAddress, address nftContractAddress) {  \n        aggregator = AggregatorV3Interface(aggregatorAddress);  \n        courseNft = ICourseNFT(nftContractAddress);  \n        owner = msg.sender;  \n    }  \n\n    modifier onlyOwner() {  \n        require(msg.sender == owner, \"Not owner\");  \n        _;  \n    }  \n\n    /**  \n     * @dev 设置指定 courseId 对应的 IPFS CID  \n     *      例如: courseId=1 -> \"QmABC...\"  \n     */  \n    function setCourseCID(uint256 courseId, string calldata cid) external onlyOwner {  \n        courseCIDs[courseId] = cid;  \n    }  \n    \n    function getCourseCID(uint256 courseId) public view returns (string memory) {  \n        return courseCIDs[courseId];  \n    }  \n    /**  \n     * @dev 读取 aggregator 最新进度，当进度≥100时自动给 user 铸造  \n     *      对应 courseId 的 NFT(其 tokenURI = \"ipfs://<cid>\")  \n     */  \n    function checkAndMint(address user, uint256 courseId) external onlyOwner {  \n        // 读取Aggregator中的进度  \n        ( , int256 answer, , , ) = aggregator.latestRoundData();  \n\n        emit ProgressChecked(answer, user, courseId);  \n\n        // 检查进度  \n        if (answer >= 100) {  \n            // 找到事先登记好的CID  \n            string memory cid = courseCIDs[courseId];  \n            require(bytes(cid).length > 0, \"CID not set for this courseId\");  \n\n            // 拼接成完整的 ipfs://URI  \n            string memory tokenURI_ = string(abi.encodePacked(\"ipfs://\", cid));  \n\n            // 铸造NFT  \n            courseNft.safeMint(user, tokenURI_);  \n            emit NftMinted(user, courseId, tokenURI_);  \n        }  \n    }  \n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
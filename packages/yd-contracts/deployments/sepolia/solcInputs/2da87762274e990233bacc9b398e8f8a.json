{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/YdCourse.sol": {
      "content": "// SPDX-License-Identifier: MIT  \npragma solidity ^0.8.20;  \n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\"; \n\ncontract YdCourse is Ownable {  \n    // YD token 合约地址  \n    IERC20 public ydToken;  \n    \n    // 课程结构  \n    struct Course {  \n        string name;  \n        uint256 price;  // 价格（以YD token计价）  \n        bool isActive;  \n        string description;  \n    }  \n    \n    // 购买记录结构  \n    struct Purchase {  \n        uint256 courseId;  \n        uint256 timestamp;  \n        uint256 price;  \n    }  \n    \n    // 存储课程  \n    mapping(uint256 => Course) public courses;  \n    // 用户购买记录  \n    mapping(address => Purchase[]) public userPurchases;  \n    // 课程总数  \n    uint256 public courseCount;  \n    \n    // 事件  \n    event CourseCreated(uint256 indexed courseId, string name, uint256 price);  \n    event CoursePurchased(address indexed buyer, uint256 indexed courseId, uint256 price);  \n    event CourseUpdated(uint256 indexed courseId, string name, uint256 price, bool isActive);  \n    \n    constructor(address _ydTokenAddress) Ownable(msg.sender) {  \n        ydToken = IERC20(_ydTokenAddress);  \n    }  \n    \n    // 添加新课程（仅管理员）  \n    function addCourse(  \n        string memory name,  \n        uint256 price,  \n        string memory description  \n    ) external onlyOwner {  \n        courseCount++;  \n        courses[courseCount] = Course({  \n            name: name,  \n            price: price,  \n            isActive: true,  \n            description: description  \n        });  \n        \n        emit CourseCreated(courseCount, name, price);  \n    }  \n    \n    // 更新课程信息（仅管理员）  \n    function updateCourse(  \n        uint256 courseId,  \n        string memory name,  \n        uint256 price,  \n        bool isActive,  \n        string memory description  \n    ) external onlyOwner {  \n        require(courseId > 0 && courseId <= courseCount, \"Invalid course ID\");  \n        \n        Course storage course = courses[courseId];  \n        course.name = name;  \n        course.price = price;  \n        course.isActive = isActive;  \n        course.description = description;  \n        \n        emit CourseUpdated(courseId, name, price, isActive);  \n    }  \n    \n    // 购买课程  \n    function purchaseCourse(uint256 courseId) external {  \n        require(courseId > 0 && courseId <= courseCount, \"Invalid course ID\");  \n        Course storage course = courses[courseId];  \n        require(course.isActive, \"Course is not active\");  \n        \n        // 检查用户是否已购买过该课程  \n        Purchase[] storage purchases = userPurchases[msg.sender];  \n        for(uint i = 0; i < purchases.length; i++) {  \n            require(purchases[i].courseId != courseId, \"Course already purchased\");  \n        }  \n        \n        // 转移YD token  \n        require(  \n            ydToken.transferFrom(msg.sender, address(this), course.price),  \n            \"Token transfer failed\"  \n        );  \n        \n        // 记录购买  \n        userPurchases[msg.sender].push(Purchase({  \n            courseId: courseId,  \n            timestamp: block.timestamp,  \n            price: course.price  \n        }));  \n        \n        emit CoursePurchased(msg.sender, courseId, course.price);  \n    }  \n    \n    // 查询用户购买的所有课程  \n    function getUserPurchases(address user) external view returns (Purchase[] memory) {  \n        return userPurchases[user];  \n    }  \n    \n    // 查询课程详情  \n    function getCourse(uint256 courseId) external view returns (Course memory) {  \n        require(courseId > 0 && courseId <= courseCount, \"Invalid course ID\");  \n        return courses[courseId];  \n    }  \n    \n    // 提取合约中的YD token（仅管理员）  \n    function withdrawTokens(uint256 amount) external onlyOwner {  \n        require(  \n            ydToken.transfer(owner(), amount),  \n            \"Token transfer failed\"  \n        );  \n    }  \n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}